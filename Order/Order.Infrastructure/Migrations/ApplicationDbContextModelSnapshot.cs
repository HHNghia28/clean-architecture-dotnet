// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Order.Infrastructure.Context;

#nullable disable

namespace Order.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Order.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DiscountFee")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ShippingFee")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.Property<string>("VoucherCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VoucherName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("VoucherValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81b32b4d-75ab-45ca-b932-ad2197004ade"),
                            Address = "Cần Thơ",
                            CreatedAt = new DateTime(2025, 1, 18, 13, 12, 23, 86, DateTimeKind.Utc).AddTicks(389),
                            CreatedBy = new Guid("868e6f06-9728-48c3-a5d7-5d1aadf4f207"),
                            DiscountFee = 0,
                            FullName = "Huỳnh Hữu Nghĩa",
                            LastModifiedAt = new DateTime(2025, 1, 18, 13, 12, 23, 86, DateTimeKind.Utc).AddTicks(391),
                            LastModifiedBy = new Guid("868e6f06-9728-48c3-a5d7-5d1aadf4f207"),
                            Note = "Giao hàng nhanh",
                            Phone = "0832474699",
                            ShippingFee = 32000,
                            Status = 0,
                            TotalPrice = 289814,
                            VoucherCode = "NGHIAHH",
                            VoucherName = "Voucher 28/08",
                            VoucherValue = 24
                        });
                });

            modelBuilder.Entity("Order.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d6837ec-e060-4ffc-a13c-e15d338cf25e"),
                            Category = "Coffee",
                            Discount = 0,
                            Name = "PhinDi Cassia",
                            OrderId = new Guid("81b32b4d-75ab-45ca-b932-ad2197004ade"),
                            Photo = "https://www.highlandscoffee.com.vn/vnt_upload/product/06_2024/Phindi_Cassia/Phindi_Cassia_Highlands_products_Image1.jpg",
                            Price = 55000,
                            ProductId = new Guid("868e6f06-9728-48c3-a5d7-5d1aadf4f201"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("8be8d0fd-6ff6-4d30-8268-92c7329a9229"),
                            Category = "Coffee",
                            Discount = 5,
                            Name = "Phindi Hạt Dẻ Cười",
                            OrderId = new Guid("81b32b4d-75ab-45ca-b932-ad2197004ade"),
                            Photo = "https://www.highlandscoffee.com.vn/vnt_upload/product/08_2023/Phindi_Pitaschio.jpg",
                            Price = 65000,
                            ProductId = new Guid("868e6f06-9728-48c3-a5d7-5d1aadf4f202"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("e6c309bd-62fb-4c0b-9ffd-7a2e7ce02e30"),
                            Category = "Other",
                            Discount = 3,
                            Name = "BÁNH TRUNG THU - BÒ XỐT VANG - HIGHLANDS COFFEE",
                            OrderId = new Guid("81b32b4d-75ab-45ca-b932-ad2197004ade"),
                            Photo = "https://www.highlandscoffee.com.vn/vnt_upload/product/08_2024/Mooncake/MOONCAKES_PRODUCTSBO-XOT-VANG.png",
                            Price = 109000,
                            ProductId = new Guid("868e6f06-9728-48c3-a5d7-5d1aadf4f209"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Order.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Order.Domain.Entities.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Order.Domain.Entities.Order", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
